#!/usr/bin/expect -f

# 自动根据窗口大小调整 SSH TTY
trap {
    set rows [stty rows]
    set cols [stty columns]
    stty rows $rows columns $cols < $spawn_out(slave,name)
} WINCH

# 参数读取
set host     [lindex $argv 0]
set port     [lindex $argv 1]
set user     [lindex $argv 2]
set password [lindex $argv 3]
set ssh_type [lindex $argv 4]
set secret   [lindex $argv 5]
set sarg     [lindex $argv 6]

set script_dir [file dirname [file normalize [info script]]]
set auth_py [file join $script_dir "auth.py"]

# 控制变量
set timeout 20
set opt_sent 0
set id_sent 0

# 启动 SSH 或 SFTP
if {$ssh_type eq "sftp"} {
    spawn sftp -P $port $user@$host
} else {
    spawn ssh -p $port $user@$host
}
match_max 100000

# 主匹配逻辑
expect {
    "*password:"
    {
        # 处理密码提示，发送密码
        send -- "$password\r"
        exp_continue
    }
    "*passphrase*"
    {
        # 处理私钥口令提示，发送密码
        send -- "$password\r"
        exp_continue
    }
    "continue connecting"
    {
        # 首次连接时确认主机指纹
        send -- "yes\r"
        exp_continue
    }
    -re "(?i)(MFA auth|OTP Code)"
    {
        # MFA 或 OTP，合并处理，获取 auth.py 路径
        set oath [exec python3 $auth_py $secret]
        send -- "$oath\r"
        exp_continue
    }
    "Opt>"
    {
        # 处理自定义选项提示，发送选项参数，确保只发送一次
        if {$opt_sent == 0} {
            send -- "$sarg\r"
            set opt_sent 1
        }
        exp_continue
    }
    "ID>"
    {
        # 处理 ID 选择提示，发送固定选项，确保只发送一次
        if {$id_sent == 0} {
            send -- "1\r"
            set id_sent 1
        }
        exp_continue
    }
    "Last login"
    {
        # 登录成功标志，继续等待后续输出，避免提前结束 expect
    }
}

# 进入交互模式
interact
